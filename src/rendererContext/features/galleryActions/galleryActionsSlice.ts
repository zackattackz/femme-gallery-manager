import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState, AppThunk} from 'src/rendererContext/store';
import {
  RenameAction,
  SetPositionAction,
  SetIsHeroAction,
  DeleteItemAction,
  CreateItemAction,
  RepositionItemsAction,
} from 'src/types/GalleryActions';
import {BlobNameToItemMap} from 'src/types/BlobNameToItemMap';
import {filterItemsByCollectionType, ItemCollectionType} from './galleryActionsHelpers';
import {sortBy} from 'lodash';
import {WindowWithContextBridgeApi} from 'src/types/WindowWithContextBridgeApi';

export const enum LoadingStatuses {
  IsInitial,
  IsLoading,
  IsSuccess,
  IsError,
}

export interface GalleryActionsState {
  cachedItems: BlobNameToItemMap;
  currentItems: BlobNameToItemMap;
  status: LoadingStatuses;
}

const testItems: BlobNameToItemMap = {
  cat1: {
    blobName: 'cat1',
    displayName: 'Cat One',
    isHero: false,
    position: 0,
    url: 'blah/cat1.png',
  },
  cat2: {
    blobName: 'cat2',
    displayName: 'Cat Two',
    isHero: true,
    position: 0,
    url: 'blah/cat2.png',
  },
  cat3: {
    blobName: 'cat3',
    displayName: 'Cat Three',
    isHero: false,
    position: 1,
    url: 'blah/cat3.png',
  },
};

const windowWithContextBridgeApi: WindowWithContextBridgeApi = window as WindowWithContextBridgeApi;

const initialState: GalleryActionsState = {
  cachedItems: {},
  currentItems: {},
  status: LoadingStatuses.IsInitial,
};

//The function below is called a thunk and allows us to perform async logic. It
//can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
//will call the thunk with the `dispatch` function as the first argument. Async
//code can then be executed and other actions can be dispatched. Thunks are
//typically used to make async requests.
export const refreshState = createAsyncThunk('galleryActions/refreshState', async () => {
  const galleryItems = await windowWithContextBridgeApi.galleryApi.listGalleryItemsAsMap();
  // The value we return becomes the `fulfilled` action payload
  return galleryItems;
});

export const galleryActionsSlice = createSlice({
  name: 'galleryActions',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    //incrementByAmount: (state, action: PayloadAction<number>) => {
    //state.value += action.payload;
    //},
    renameItem: (state, action: PayloadAction<RenameAction>) => {
      const {itemBlobName, newDisplayName} = action.payload;
      state.currentItems[itemBlobName].displayName = newDisplayName;
    },

    setPosition: (state, action: PayloadAction<SetPositionAction>) => {
      const {itemBlobName, newPosition} = action.payload;
      state.currentItems[itemBlobName].position = newPosition;
    },

    setIsHero: (state, action: PayloadAction<SetIsHeroAction>) => {
      const {itemBlobName, newIsHero} = action.payload;
      state.currentItems[itemBlobName].isHero = newIsHero;
    },

    deleteItem: (state, action: PayloadAction<DeleteItemAction>) => {
      const {itemBlobName} = action.payload;
      delete state.currentItems[itemBlobName];
    },

    repositionItems: (state, action: PayloadAction<RepositionItemsAction>) => {
      const {newIndex, oldIndex, collection} = action.payload;
      const itemsBeforeMove = sortBy(
        filterItemsByCollectionType(Object.values(state.currentItems), collection),
        (item) => item.position
      );
      const itemToMove = itemsBeforeMove.splice(oldIndex, 1)[0]; // Remove the item to be moved
      const itemsAfterMove = [...itemsBeforeMove]; // Copy over old items
      itemsAfterMove.splice(newIndex, 0, itemToMove); // Splice in the item to the new index
      itemsAfterMove.forEach((item, index) => {
        // Set the positions of the items based on their new order
        state.currentItems[item.blobName].position = index;
      });
    },
  },
  //  The `extraReducers` field lets the slice handle actions defined elsewhere,
  //  including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(refreshState.pending, (state) => {
        state.status = LoadingStatuses.IsLoading;
      })
      .addCase(refreshState.fulfilled, (state, action) => {
        state.currentItems = action.payload;
        state.cachedItems = action.payload;
        state.status = LoadingStatuses.IsSuccess;
      })
      .addCase(refreshState.rejected, (state, action) => {
        state.status = LoadingStatuses.IsError;
        throw action.error;
      });
  },
});

export const {renameItem, setPosition, setIsHero, deleteItem, repositionItems} =
  galleryActionsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCurrentItems = (state: RootState) => state.galleryActions.currentItems;

export const selectCurrentStatus = (state: RootState) => state.galleryActions.status;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default galleryActionsSlice.reducer;
